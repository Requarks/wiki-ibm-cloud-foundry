#######################################################################
# Wiki.js - CONFIGURATION                                             #
#######################################################################
# Full documentation + examples:
# https://docs.requarks.io/install

# ---------------------------------------------------------------------
# Port the main http server should listen to (3000 by default)
# ---------------------------------------------------------------------

# In Cloud Foundry, the PORT environment variable determines which port the app should listen for requests on
# This is a system-provided environment variable which is dynamically allocated by the IBM Cloud Foundry public runtime for each instance of the CF App
# Therefore any code which obtains or uses the app port should refer to it using the PORT environment variable

# If the Wiki.js variable config variable below is removed, the Wiki.js port defaults to 80
# If this Wiki.js variable config variable value is left empty, it uses $PORT from the IBM Cloud Foundry public runtime and the Wiki.js port defaults to 8080
port:

# ---------------------------------------------------------------------
# Database
# ---------------------------------------------------------------------
# Supported Database Engines:
# - postgres = PostgreSQL 9.5 or later
# - mysql = MySQL 8.0 or later (5.7.8 partially supported, refer to docs)
# - mariadb = MariaDB 10.2.7 or later
# - mssql = MS SQL Server 2012 or later
# - sqlite = SQLite 3.9 or later

db:
  type: postgres

  # PostgreSQL / MySQL / MariaDB / MS SQL Server...
  host:
  port:
  user:
  pass:
  db:

  # In most scenarios, the SSL connection can be automatically established
  # by the database client driver.
  ssl: true

  # If your server requires a specific or self-generated certificate,
  # you can specify the custom TLS options
  # Node.js TLS documentation has the complete list of accepted parameters for the sslOptions object:
  # https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
  sslOptions:
  # To use custom SSL settings, the auto flag must be set to false
    auto: false
  # Workaround to error SELF_SIGNED_CERT_IN_CHAIN from pg 8.x described on https://github.com/brianc/node-postgres/issues/2009
    rejectUnauthorized: false
  #  ca: path/to/ca.crt
  #  cert: path/to/cert.crt
  #  key: path/to/key.pem
  #  pfx: path/to/cert.pfx
  #  passphrase: xyz123




#######################################################################
# ADVANCED OPTIONS                                                    #
#######################################################################
# Do not change unless you know what you are doing!

# ---------------------------------------------------------------------
# Use X-Forwarded-For header
# ---------------------------------------------------------------------
# Enable only if Wiki.js is behind a reverse-proxy (nginx, apache, etc)
# or a cloud proxying services like Cloudflare.

trustProxy: false

# ---------------------------------------------------------------------
# HTTPS SSL/TLS Settings
# ---------------------------------------------------------------------
# Consider using a reverse proxy (e.g. nginx) if you require more
# advanced options than those provided below.

ssl:
  enabled: false

  port: 3443

# Lets Encrypt! certificate
  #provider: letsencrypt
  #domain: wiki.yourdomain.com
  #subscriberEmail: admin@example.com

# Custom certificate
  provider: custom

  # Certificate format, either 'pem' or 'pfx':
  format: pem
  # Using PEM format:
  key: path/to/key.pem
  cert: path/to/cert.pem
  # Using PFX format:
  pfx: path/to/cert.pfx
  # Passphrase when using encrypted PEM / PFX keys (default: null):
  passphrase: null
  # Diffie Hellman parameters, with key length being greater or equal
  # to 1024 bits (default: null):
  dhparam: null

  # Listen on this HTTP port and redirect all requests to HTTPS.
  # Set to false to disable (default: 80):
  redirectNonSSLPort: 80

# ---------------------------------------------------------------------
# App to Database Connection Pool Options
# ---------------------------------------------------------------------
# Wiki.js uses a pool of connections to the database to efficiently manage requests.
# Refer to https://github.com/vincit/tarn.js for all possible options

pool:
  # min: 2
  # max: 10

# ---------------------------------------------------------------------
# IP address the server should listen to
# ---------------------------------------------------------------------
# If you have multiple ethernet interfaces and would like to
# specify which IP should be used for listening.
# Leave the default 0.0.0.0 to listen on all interfaces

bindIP: 0.0.0.0

# ---------------------------------------------------------------------
# Log Level
# ---------------------------------------------------------------------
# Possible values: error, warn, info (default), verbose, debug, silly

logLevel: info


# ---------------------------------------------------------------------
# Upload Limits (deprecated after 2.2, retained for reference)
# ---------------------------------------------------------------------
# If you're using a reverse-proxy in front of Wiki.js, you must also
# change your proxy upload limits!

uploads:
  # Maximum upload size in bytes per file (default: 5242880 (5 MB))
  maxFileSize: 5242880
  # Maximum file uploads per request (default: 20)
  maxFiles: 10


# ---------------------------------------------------------------------
# Offline Mode
# ---------------------------------------------------------------------
# If your server cannot access the internet. Set to true and manually
# download the offline files for sideloading.

offline: false


# ---------------------------------------------------------------------
# High-Availability
# ---------------------------------------------------------------------
# PostgreSQL is required to enable this option.
# Set to true if you have multiple concurrent instances running off the
# same DB (e.g. Kubernetes pods / load balanced instances)

ha: false


# ---------------------------------------------------------------------
# Data Paths
# ---------------------------------------------------------------------
# Wiki.js needs a folder to write temporary data.
# By default, this path is ./data which is relative to the wiki installation.
# If write access cannot be given to this path, you can change it by
# setting the dataPath parameter

#dataPath: /path/to/directory

