---
stages:
- name: Git and Build Stage
  inputs:
  - url: https://github.com/Requarks/wiki-ibm-cloud-foundry.git
    type: git
    dir_name: null
    service: ${REPO}
    branch: ${REPO_BRANCH}
    # Cannot use two git in one build job
  triggers:
  - type: git
    events: '{"push":true,"pull_request":false,"pull_request_closed":false}'
  jobs:
  - name: Git and Build Job
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash

      echo "Check curl is installed"
      curl -V | grep "curl"
      echo ""

      #echo "Debugging - Show _pipeline_script.sh"
      #echo "$(cat _pipeline_script.sh)"

      #echo "Debugging - echo current working directory"
      #pwd

      #echo "Debugging - echo all environment variables which should match https://console.bluemix.net/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_envprop"
      #env

      #echo "Debugging - list all files in current working directory"
      #ls -lha

- name: Deploy Stage
  inputs:
  - type: job
    stage: Git and Build Stage
    job: Git and Build Job
  triggers:
  - type: stage
  properties:
  - name: CF_DB_NAME
    value: ${CF_DB_NAME}
    type: text
  - name: CF_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: CF_REGION
    value: ${CF_REGION}
    type: text
  jobs:
  - name: Blue-Green Deploy Job
    type: deployer
    deploy_type: cf
    target:
      region_id: ${CF_REGION_ID}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
    script: |-
      #!/bin/bash

      #echo "Create required services instantiation (MongoDB for Wikijs 1.x)"
      #cf create-service compose-for-mongodb Standard mongodb-service-instance

      echo "Create required services instantiation (new PostgreSQL service named "$CF_DB_NAME" for Wikijs 2.x)"
      cf create-service databases-for-postgresql standard $CF_DB_NAME

      echo "Check if PostgreSQL has been created (this can take 5-15mins for production-ready PostgreSQL DB)"
      provision_start=$(date +%s)
      while [ "$(cf services | grep $CF_DB_NAME | grep succeeded)" == "" ]; do
        echo "Waiting 120 seconds"
        sleep 120
      done
      provision_end=$(date +%s)
      provision=$((((provision_end-provision_start))/60))
      echo ""
      echo "PostgreSQL took $provision minutes to provision"

      echo "Amend Cloud Foundry manifest variables injection"
      CF_REGION="${CF_REGION##*:}"
      sed -i "s/cf_manual_app_name:.*/cf_manual_app_name: $CF_APP_NAME/g" ./manifest-vars.yml
      sed -i "s/cf_manual_region:.*/cf_manual_region: $CF_REGION/g" ./manifest-vars.yml
      sed -i "s/cf_manual_db_service_name:.*/cf_manual_db_service_name: $CF_DB_NAME/g" ./manifest-vars.yml

      # Standard Deploy (instead of Blue-Green Deploy)
      #cf push "${CF_APP}"
      #cf push "${CF_APP}" -f manifest.yml
      #cf push "${CF_APP}" --vars-file=manifest-vars.yml
      #cf push "${CF_APP}" -f manifest.yml --vars-file=manifest-vars.yml


      # Shell Function of Blue-Green Deploy for Production
      blue-green_deploy() {

      if ! [ cf app $CF_APP ]; then
        echo "First-time build"
        cf push $CF_APP --vars-file=manifest-vars.yml
      else
        OLD_CF_APP=${CF_APP}-OLD-$(date +"%s")
        rollback() {
          set +e
          if cf app $OLD_CF_APP; then
            cf logs $CF_APP --recent
            cf delete $CF_APP -f
            cf rename $OLD_CF_APP $CF_APP
          fi
          exit 1
        }
        set -e
        trap rollback ERR
        cf rename $CF_APP $OLD_CF_APP
        cf push $CF_APP --vars-file=manifest-vars.yml
        cf delete $OLD_CF_APP -f
      fi

      }

      # Execute deploy function
      blue-green_deploy

      # Alternative to deploy function, dependant on CF Space names
      #if [ "$CF_SPACE" = "production" ]; then
      #  set_env
      #  blue-green_deploy
      #else
      #  echo "No matching conditions for Blue-Green Deploy to Test or Prod"
      #  echo $CF_APP
      #  echo "Above CF App name is defined in toolchain.yml or in pipeline.yml Deploy Job"
      #fi

      # Export app name and URL for use in later Pipeline jobs
      #export CF_APP_NAME="$CF_APP"
      #export APP_URL=http://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')


      # View logs
      # cf logs "${CF_APP}" --recent

hooks:
- enabled: false
  label: null
  ssl_enabled: false
  url: https://devops-api.us-south.devops.cloud.ibm.com/v1/messaging/webhook/publish


# Edited from https://github.com/open-toolchain/default-toolchain/blob/master/.bluemix/pipeline.yml
# Edited from https://github.com/open-toolchain/simple-toolchain/tree/master/.bluemix
